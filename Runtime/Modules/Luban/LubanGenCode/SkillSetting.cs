//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace cfg
{
public sealed partial class SkillSetting :  Bright.Config.BeanBase 
{
    public SkillSetting(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        AckRate = _buf.ReadFloat();
        AddY = _buf.ReadFloat();
        HitTime = _buf.ReadFloat();
        NoGTimeMulti = _buf.ReadFloat();
        AddHor = _buf.ReadFloat();
        HorForward = _buf.ReadFloat();
        HitStop = _buf.ReadFloat();
        BreakPower = _buf.ReadFloat();
        Sound = _buf.ReadInt();
        HitEffect = _buf.ReadInt();
        PostInit();
    }

    public static SkillSetting DeserializeSkillSetting(ByteBuf _buf)
    {
        return new SkillSetting(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 攻击倍率
    /// </summary>
    public float AckRate { get; private set; }
    /// <summary>
    /// 上升距离
    /// </summary>
    public float AddY { get; private set; }
    /// <summary>
    /// 上升时间
    /// </summary>
    public float HitTime { get; private set; }
    /// <summary>
    /// 无重力时间率
    /// </summary>
    public float NoGTimeMulti { get; private set; }
    /// <summary>
    /// 水平推力
    /// </summary>
    public float AddHor { get; private set; }
    /// <summary>
    /// 技能正方向(0~360)
    /// </summary>
    public float HorForward { get; private set; }
    /// <summary>
    /// 顿帧
    /// </summary>
    public float HitStop { get; private set; }
    /// <summary>
    /// 破甲值
    /// </summary>
    public float BreakPower { get; private set; }
    /// <summary>
    /// 音效
    /// </summary>
    public int Sound { get; private set; }
    /// <summary>
    /// 击中特效
    /// </summary>
    public int HitEffect { get; private set; }

    public const int __ID__ = 633610975;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "AckRate:" + AckRate + ","
        + "AddY:" + AddY + ","
        + "HitTime:" + HitTime + ","
        + "NoGTimeMulti:" + NoGTimeMulti + ","
        + "AddHor:" + AddHor + ","
        + "HorForward:" + HorForward + ","
        + "HitStop:" + HitStop + ","
        + "BreakPower:" + BreakPower + ","
        + "Sound:" + Sound + ","
        + "HitEffect:" + HitEffect + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}